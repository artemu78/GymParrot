/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as CreateRouteImport } from './routes/create'
import { Route as ActivitiesRouteImport } from './routes/activities'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PracticeActivityIdRouteImport } from './routes/practice.$activityId'
import { Route as DemoStoreRouteImport } from './routes/demo.store'
import { Route as ActivityActivityIdRouteImport } from './routes/activity.$activityId'

const CreateRoute = CreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRouteImport,
} as any)
const ActivitiesRoute = ActivitiesRouteImport.update({
  id: '/activities',
  path: '/activities',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PracticeActivityIdRoute = PracticeActivityIdRouteImport.update({
  id: '/practice/$activityId',
  path: '/practice/$activityId',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStoreRoute = DemoStoreRouteImport.update({
  id: '/demo/store',
  path: '/demo/store',
  getParentRoute: () => rootRouteImport,
} as any)
const ActivityActivityIdRoute = ActivityActivityIdRouteImport.update({
  id: '/activity/$activityId',
  path: '/activity/$activityId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/activities': typeof ActivitiesRoute
  '/create': typeof CreateRoute
  '/activity/$activityId': typeof ActivityActivityIdRoute
  '/demo/store': typeof DemoStoreRoute
  '/practice/$activityId': typeof PracticeActivityIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/activities': typeof ActivitiesRoute
  '/create': typeof CreateRoute
  '/activity/$activityId': typeof ActivityActivityIdRoute
  '/demo/store': typeof DemoStoreRoute
  '/practice/$activityId': typeof PracticeActivityIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/activities': typeof ActivitiesRoute
  '/create': typeof CreateRoute
  '/activity/$activityId': typeof ActivityActivityIdRoute
  '/demo/store': typeof DemoStoreRoute
  '/practice/$activityId': typeof PracticeActivityIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/activities'
    | '/create'
    | '/activity/$activityId'
    | '/demo/store'
    | '/practice/$activityId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/activities'
    | '/create'
    | '/activity/$activityId'
    | '/demo/store'
    | '/practice/$activityId'
  id:
    | '__root__'
    | '/'
    | '/activities'
    | '/create'
    | '/activity/$activityId'
    | '/demo/store'
    | '/practice/$activityId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ActivitiesRoute: typeof ActivitiesRoute
  CreateRoute: typeof CreateRoute
  ActivityActivityIdRoute: typeof ActivityActivityIdRoute
  DemoStoreRoute: typeof DemoStoreRoute
  PracticeActivityIdRoute: typeof PracticeActivityIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/activities': {
      id: '/activities'
      path: '/activities'
      fullPath: '/activities'
      preLoaderRoute: typeof ActivitiesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/practice/$activityId': {
      id: '/practice/$activityId'
      path: '/practice/$activityId'
      fullPath: '/practice/$activityId'
      preLoaderRoute: typeof PracticeActivityIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/store': {
      id: '/demo/store'
      path: '/demo/store'
      fullPath: '/demo/store'
      preLoaderRoute: typeof DemoStoreRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/activity/$activityId': {
      id: '/activity/$activityId'
      path: '/activity/$activityId'
      fullPath: '/activity/$activityId'
      preLoaderRoute: typeof ActivityActivityIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ActivitiesRoute: ActivitiesRoute,
  CreateRoute: CreateRoute,
  ActivityActivityIdRoute: ActivityActivityIdRoute,
  DemoStoreRoute: DemoStoreRoute,
  PracticeActivityIdRoute: PracticeActivityIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
